/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Customer, CustomerInterface } from "../Customer";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_walletAddr",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "fullname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "dob",
            type: "string",
          },
          {
            internalType: "string",
            name: "govtID",
            type: "string",
          },
          {
            internalType: "string",
            name: "picture",
            type: "string",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct Customer.USERS",
        name: "_customer",
        type: "tuple",
      },
    ],
    name: "createCustomer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_walletAddr",
        type: "address",
      },
    ],
    name: "getCustomer",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "fullname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "dob",
            type: "string",
          },
          {
            internalType: "string",
            name: "govtID",
            type: "string",
          },
          {
            internalType: "string",
            name: "picture",
            type: "string",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct Customer.USERS",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_walletAddr",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "fullname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "dob",
            type: "string",
          },
          {
            internalType: "string",
            name: "govtID",
            type: "string",
          },
          {
            internalType: "string",
            name: "picture",
            type: "string",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct Customer.USERS",
        name: "_customer",
        type: "tuple",
      },
    ],
    name: "updateCustomer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112238061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b1461007157806392818e7c1461008f578063cb949e51146100bf578063e866f054146100ef578063f2fde38b1461011f575b600080fd5b61006f61013b565b005b6100796101c3565b6040516100869190610fb6565b60405180910390f35b6100a960048036038101906100a49190610dc0565b6101ec565b6040516100b69190610fb6565b60405180910390f35b6100d960048036038101906100d49190610d97565b61039a565b6040516100e69190611011565b60405180910390f35b61010960048036038101906101049190610dc0565b6107a5565b6040516101169190610fb6565b60405180910390f35b61013960048036038101906101349190610d97565b610953565b005b610143610a4b565b73ffffffffffffffffffffffffffffffffffffffff166101616101c3565b73ffffffffffffffffffffffffffffffffffffffff16146101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae90610ff1565b60405180910390fd5b6101c16000610a53565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006101f6610a4b565b73ffffffffffffffffffffffffffffffffffffffff166102146101c3565b73ffffffffffffffffffffffffffffffffffffffff161461026a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026190610ff1565b60405180910390fd5b610272610b17565b82905080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906102d1929190610b63565b5060208201518160010190805190602001906102ee929190610b63565b50604082015181600201908051906020019061030b929190610b63565b506060820151816003019080519060200190610328929190610b63565b506080820151816004019080519060200190610345929190610b63565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508391505092915050565b6103a2610b17565b6103aa610a4b565b73ffffffffffffffffffffffffffffffffffffffff166103c86101c3565b73ffffffffffffffffffffffffffffffffffffffff161461041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610ff1565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c001604052908160008201805461047a90611135565b80601f01602080910402602001604051908101604052809291908181526020018280546104a690611135565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b5050505050815260200160018201805461050c90611135565b80601f016020809104026020016040519081016040528092919081815260200182805461053890611135565b80156105855780601f1061055a57610100808354040283529160200191610585565b820191906000526020600020905b81548152906001019060200180831161056857829003601f168201915b5050505050815260200160028201805461059e90611135565b80601f01602080910402602001604051908101604052809291908181526020018280546105ca90611135565b80156106175780601f106105ec57610100808354040283529160200191610617565b820191906000526020600020905b8154815290600101906020018083116105fa57829003601f168201915b5050505050815260200160038201805461063090611135565b80601f016020809104026020016040519081016040528092919081815260200182805461065c90611135565b80156106a95780601f1061067e576101008083540402835291602001916106a9565b820191906000526020600020905b81548152906001019060200180831161068c57829003601f168201915b505050505081526020016004820180546106c290611135565b80601f01602080910402602001604051908101604052809291908181526020018280546106ee90611135565b801561073b5780601f106107105761010080835404028352916020019161073b565b820191906000526020600020905b81548152906001019060200180831161071e57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080915050919050565b60006107af610a4b565b73ffffffffffffffffffffffffffffffffffffffff166107cd6101c3565b73ffffffffffffffffffffffffffffffffffffffff1614610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081a90610ff1565b60405180910390fd5b61082b610b17565b82905080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908051906020019061088a929190610b63565b5060208201518160010190805190602001906108a7929190610b63565b5060408201518160020190805190602001906108c4929190610b63565b5060608201518160030190805190602001906108e1929190610b63565b5060808201518160040190805190602001906108fe929190610b63565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508391505092915050565b61095b610a4b565b73ffffffffffffffffffffffffffffffffffffffff166109796101c3565b73ffffffffffffffffffffffffffffffffffffffff16146109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690610ff1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3690610fd1565b60405180910390fd5b610a4881610a53565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054610b6f90611135565b90600052602060002090601f016020900481019282610b915760008555610bd8565b82601f10610baa57805160ff1916838001178555610bd8565b82800160010185558215610bd8579182015b82811115610bd7578251825591602001919060010190610bbc565b5b509050610be59190610be9565b5090565b5b80821115610c02576000816000905550600101610bea565b5090565b6000610c19610c1484611064565b611033565b905082815260208101848484011115610c3157600080fd5b610c3c8482856110f3565b509392505050565b600081359050610c53816111d6565b92915050565b600082601f830112610c6a57600080fd5b8135610c7a848260208601610c06565b91505092915050565b600060c08284031215610c9557600080fd5b610c9f60c0611033565b9050600082013567ffffffffffffffff811115610cbb57600080fd5b610cc784828501610c59565b600083015250602082013567ffffffffffffffff811115610ce757600080fd5b610cf384828501610c59565b602083015250604082013567ffffffffffffffff811115610d1357600080fd5b610d1f84828501610c59565b604083015250606082013567ffffffffffffffff811115610d3f57600080fd5b610d4b84828501610c59565b606083015250608082013567ffffffffffffffff811115610d6b57600080fd5b610d7784828501610c59565b60808301525060a0610d8b84828501610c44565b60a08301525092915050565b600060208284031215610da957600080fd5b6000610db784828501610c44565b91505092915050565b60008060408385031215610dd357600080fd5b6000610de185828601610c44565b925050602083013567ffffffffffffffff811115610dfe57600080fd5b610e0a85828601610c83565b9150509250929050565b610e1d816110c1565b82525050565b610e2c816110c1565b82525050565b6000610e3d82611094565b610e47818561109f565b9350610e57818560208601611102565b610e60816111c5565b840191505092915050565b6000610e786026836110b0565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610ede6020836110b0565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060c0830160008301518482036000860152610f2e8282610e32565b91505060208301518482036020860152610f488282610e32565b91505060408301518482036040860152610f628282610e32565b91505060608301518482036060860152610f7c8282610e32565b91505060808301518482036080860152610f968282610e32565b91505060a0830151610fab60a0860182610e14565b508091505092915050565b6000602082019050610fcb6000830184610e23565b92915050565b60006020820190508181036000830152610fea81610e6b565b9050919050565b6000602082019050818103600083015261100a81610ed1565b9050919050565b6000602082019050818103600083015261102b8184610f11565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561105a57611059611196565b5b8060405250919050565b600067ffffffffffffffff82111561107f5761107e611196565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006110cc826110d3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015611120578082015181840152602081019050611105565b8381111561112f576000848401525b50505050565b6000600282049050600182168061114d57607f821691505b6020821081141561116157611160611167565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6111df816110c1565b81146111ea57600080fd5b5056fea2646970667358221220bd524b3808a847cf0014952b0616a56a98ad06dc37dbef04c7d40f9aee71846164736f6c63430008000033";

type CustomerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CustomerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Customer__factory extends ContractFactory {
  constructor(...args: CustomerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Customer> {
    return super.deploy(overrides || {}) as Promise<Customer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Customer {
    return super.attach(address) as Customer;
  }
  connect(signer: Signer): Customer__factory {
    return super.connect(signer) as Customer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomerInterface {
    return new utils.Interface(_abi) as CustomerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Customer {
    return new Contract(address, _abi, signerOrProvider) as Customer;
  }
}
