/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Driver, DriverInterface } from "../Driver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_walletAddr",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "fullname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "dob",
            type: "string",
          },
          {
            internalType: "string",
            name: "driverAddress",
            type: "string",
          },
          {
            internalType: "string",
            name: "govtID",
            type: "string",
          },
          {
            internalType: "string",
            name: "picture",
            type: "string",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct Driver.DRIVER",
        name: "_driver",
        type: "tuple",
      },
    ],
    name: "createDriver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_walletAddr",
        type: "address",
      },
    ],
    name: "getDriver",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "fullname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "dob",
            type: "string",
          },
          {
            internalType: "string",
            name: "driverAddress",
            type: "string",
          },
          {
            internalType: "string",
            name: "govtID",
            type: "string",
          },
          {
            internalType: "string",
            name: "picture",
            type: "string",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct Driver.DRIVER",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6111368061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806365c301ab1461005c578063715018a61461008c5780638da5cb5b14610096578063c9865b79146100b4578063f2fde38b146100e4575b600080fd5b61007660048036038101906100719190610c90565b610100565b6040516100839190610f24565b60405180910390f35b61009461059d565b005b61009e610625565b6040516100ab9190610ec9565b60405180910390f35b6100ce60048036038101906100c99190610cb9565b61064e565b6040516100db9190610ec9565b60405180910390f35b6100fe60048036038101906100f99190610c90565b610819565b005b6101086109dd565b610110610911565b73ffffffffffffffffffffffffffffffffffffffff1661012e610625565b73ffffffffffffffffffffffffffffffffffffffff1614610184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017b90610f04565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820180546101e090611048565b80601f016020809104026020016040519081016040528092919081815260200182805461020c90611048565b80156102595780601f1061022e57610100808354040283529160200191610259565b820191906000526020600020905b81548152906001019060200180831161023c57829003601f168201915b5050505050815260200160018201805461027290611048565b80601f016020809104026020016040519081016040528092919081815260200182805461029e90611048565b80156102eb5780601f106102c0576101008083540402835291602001916102eb565b820191906000526020600020905b8154815290600101906020018083116102ce57829003601f168201915b5050505050815260200160028201805461030490611048565b80601f016020809104026020016040519081016040528092919081815260200182805461033090611048565b801561037d5780601f106103525761010080835404028352916020019161037d565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050505050815260200160038201805461039690611048565b80601f01602080910402602001604051908101604052809291908181526020018280546103c290611048565b801561040f5780601f106103e45761010080835404028352916020019161040f565b820191906000526020600020905b8154815290600101906020018083116103f257829003601f168201915b5050505050815260200160048201805461042890611048565b80601f016020809104026020016040519081016040528092919081815260200182805461045490611048565b80156104a15780601f10610476576101008083540402835291602001916104a1565b820191906000526020600020905b81548152906001019060200180831161048457829003601f168201915b505050505081526020016005820180546104ba90611048565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690611048565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b505050505081526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080915050919050565b6105a5610911565b73ffffffffffffffffffffffffffffffffffffffff166105c3610625565b73ffffffffffffffffffffffffffffffffffffffff1614610619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061090610f04565b60405180910390fd5b6106236000610919565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610658610911565b73ffffffffffffffffffffffffffffffffffffffff16610676610625565b73ffffffffffffffffffffffffffffffffffffffff16146106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c390610f04565b60405180910390fd5b6106d46109dd565b82905080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610733929190610a30565b506020820151816001019080519060200190610750929190610a30565b50604082015181600201908051906020019061076d929190610a30565b50606082015181600301908051906020019061078a929190610a30565b5060808201518160040190805190602001906107a7929190610a30565b5060a08201518160050190805190602001906107c4929190610a30565b5060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508391505092915050565b610821610911565b73ffffffffffffffffffffffffffffffffffffffff1661083f610625565b73ffffffffffffffffffffffffffffffffffffffff1614610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c90610f04565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc90610ee4565b60405180910390fd5b61090e81610919565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054610a3c90611048565b90600052602060002090601f016020900481019282610a5e5760008555610aa5565b82601f10610a7757805160ff1916838001178555610aa5565b82800160010185558215610aa5579182015b82811115610aa4578251825591602001919060010190610a89565b5b509050610ab29190610ab6565b5090565b5b80821115610acf576000816000905550600101610ab7565b5090565b6000610ae6610ae184610f77565b610f46565b905082815260208101848484011115610afe57600080fd5b610b09848285611006565b509392505050565b600081359050610b20816110e9565b92915050565b600082601f830112610b3757600080fd5b8135610b47848260208601610ad3565b91505092915050565b600060e08284031215610b6257600080fd5b610b6c60e0610f46565b9050600082013567ffffffffffffffff811115610b8857600080fd5b610b9484828501610b26565b600083015250602082013567ffffffffffffffff811115610bb457600080fd5b610bc084828501610b26565b602083015250604082013567ffffffffffffffff811115610be057600080fd5b610bec84828501610b26565b604083015250606082013567ffffffffffffffff811115610c0c57600080fd5b610c1884828501610b26565b606083015250608082013567ffffffffffffffff811115610c3857600080fd5b610c4484828501610b26565b60808301525060a082013567ffffffffffffffff811115610c6457600080fd5b610c7084828501610b26565b60a08301525060c0610c8484828501610b11565b60c08301525092915050565b600060208284031215610ca257600080fd5b6000610cb084828501610b11565b91505092915050565b60008060408385031215610ccc57600080fd5b6000610cda85828601610b11565b925050602083013567ffffffffffffffff811115610cf757600080fd5b610d0385828601610b50565b9150509250929050565b610d1681610fd4565b82525050565b610d2581610fd4565b82525050565b6000610d3682610fa7565b610d408185610fb2565b9350610d50818560208601611015565b610d59816110d8565b840191505092915050565b6000610d71602683610fc3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610dd7602083610fc3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060e0830160008301518482036000860152610e278282610d2b565b91505060208301518482036020860152610e418282610d2b565b91505060408301518482036040860152610e5b8282610d2b565b91505060608301518482036060860152610e758282610d2b565b91505060808301518482036080860152610e8f8282610d2b565b91505060a083015184820360a0860152610ea98282610d2b565b91505060c0830151610ebe60c0860182610d0d565b508091505092915050565b6000602082019050610ede6000830184610d1c565b92915050565b60006020820190508181036000830152610efd81610d64565b9050919050565b60006020820190508181036000830152610f1d81610dca565b9050919050565b60006020820190508181036000830152610f3e8184610e0a565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610f6d57610f6c6110a9565b5b8060405250919050565b600067ffffffffffffffff821115610f9257610f916110a9565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610fdf82610fe6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015611033578082015181840152602081019050611018565b83811115611042576000848401525b50505050565b6000600282049050600182168061106057607f821691505b602082108114156110745761107361107a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6110f281610fd4565b81146110fd57600080fd5b5056fea2646970667358221220d0ba2df611fe9184a6bc240964431a9d1610cdfee41271e478719d07ac3c9e2664736f6c63430008000033";

type DriverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DriverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Driver__factory extends ContractFactory {
  constructor(...args: DriverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Driver> {
    return super.deploy(overrides || {}) as Promise<Driver>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Driver {
    return super.attach(address) as Driver;
  }
  connect(signer: Signer): Driver__factory {
    return super.connect(signer) as Driver__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DriverInterface {
    return new utils.Interface(_abi) as DriverInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Driver {
    return new Contract(address, _abi, signerOrProvider) as Driver;
  }
}
